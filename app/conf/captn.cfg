# This whole config example needs to be compared to the defaults before publishing!
# It will be just an example though....

# [general]
# dryRun = false

[update]
# Meant to run at night while you're sleeping - a small pause to keep things graceful between updates of the same container.
delayBetweenUpdates =  15s

[updateVerification]
# Total time we're willing to wait for the container to become stable.
maxWait = 480s
# How many seconds the container must stay healthy (or unchanged) to be considered stable.
stableTime = 15s
# How often we check the container's status.
checkInterval = 5s
# Time after container start during which we wait for the container to come up.
gracePeriod = 15s

[prune]
# Out with the old! No freeloaders allowed.
removeUnusedImages = true
# Containers are like leftovers - toss them before they smell.
removeOldContainers = true
# Nothing under 48h gets deleted. Even backups deserve a short life.
minBackupAge = 0h
# Always keep one - for old timeâ€™s sake.
minBackupsToKeep = 0

[docker]
apiUrl = https://registry.hub.docker.com/v2
# Crawl 'til your legs give out.
pageCrawlLimit = 1000
# Max 100 per page - that's the Docker Hub limit.
pageSize = 100

[ghcr]
apiUrl = https://ghcr.io/v2
pageCrawlLimit = 1000
# GHCR maxes out at 100 tags per page. Don't get greedy.
pageSize = 100

[logging]
# Because DEBUG is for the brave and ERROR is for the late.
level = INFO

[assignmentsByName]
MariaDB = testing
PostgreSQL-Immich = strict
PostgreSQL = strict
Container-Updater = default
redis = testing
immich-server = immich
immich-machine-learning = immich
captn = strict
captn-dev = strict

[rules]
default =       {
                    "minImageAge": "3h",
                    "progressiveUpgrade": true,
                    "allow": {
                        "major": true,
                        "minor": true,
                        "patch": true,
                        "build": true,
                        "digest": true
                    }
                }
testing =       {
                    "minImageAge": "3h",
                    "progressiveUpgrade": true,
                    "allow": {
                        "major": true,
                        "minor": true,
                        "patch": true,
                        "build": true,
                        "digest": true
                    }
                }
immich =        {
                    "minImageAge": "3h",
                    "allow": {
                        "major": true,
                        "minor": true,
                        "patch": true,
                        "build": true,
                        "digest": true
                    },
                    "conditions": {
                        "major": {
                            "require": ["minor", "patch", "build"]
                        },
                        "minor": {
                            "require": ["patch", "build"]
                        }
                    },
                    "lagPolicy": {
                        "major": 1
                    }
                }

#####
# Using ENVs:
#
# docker_apiUrl
# docker_pageCrawlLimit
# ghcr_pageCrawlLimit
# ghcr_pageCrawlLimit
# logging_level
# assignmentsByName_MariaDB
# assignmentsByName_PostgreSQL
# assignmentsImage_mariadb
# assignmentsImage_nextcloud
# assignmentsImage_immich-app/immich-server
# assignmentsId_a49cf538a7b06d601c3644223bfb59c81e165ad2d2b8d098d9c9427186f7fa68
# rules_testing
#####

# [general]
# test_mode = ${DCU_TEST_MODE:-"true"}
# prune_images = ${DCU_PRUNE_IMAGES:-"true"}
# prune_container_backups = ${DCU_PRUNE_CONTAINER_BACKUPS:-"true"}
# container_backups_retention = ${DCU_CONTAINER_BACKUPS_RETENTION:-"7"}
# container_backups_keep_last = ${DCU_CONTAINER_BACKUPS_KEEP_LAST:-"1"}
# container_update_validation_time = ${DCU_CONTAINER_UPDATE_VALIDATION_TIME:-"120"}
# update_rules = ${DCU_UPDATE_RULES:-"*[0.1.1-1,true]"}
# docker_hub_api_url = ${DCU_DOCKER_HUB_API_URL:-"https://registry.hub.docker.com/v2"}
# github_container_repository_api_url = ${DCU_GITHUB_CONTAINER_REPOSITORY_API_URL:-"https://ghcr.io/v2"}
# docker_hub_api_image_tags_page_size_limit = ${DCU_DOCKER_HUB_API_IMAGE_TAGS_PAGE_SIZE_LIMIT:-"100"}
# github_container_repository_api_image_tags_page_size_limit = ${DCU_GITHUB_CONTAINER_REPOSITORY_API_IMAGE_TAGS_PAGE_SIZE_LIMIT:-"1000"}
# docker_hub_api_image_tags_page_crawl_limit = ${DCU_DOCKER_HUB_API_IMAGE_TAGS_PAGE_CRAWL_LIMIT:-"10"}
# github_container_repository_api_image_tags_page_crawl_limit = ${DCU_GITHUB_CONTAINER_REPOSITORY_API_IMAGE_TAGS_PAGE_CRAWL_LIMIT:-"1000"}
# docker_hub_image_minimum_age = ${DCU_DOCKER_HUB_IMAGE_MINIMUM_AGE:-"21600"}
# github_container_repository_image_minimum_age = ${DCU_GITHUB_CONTAINER_REPOSITORY_IMAGE_MINIMUM_AGE:-"21600"}
# pre_scripts_folder = ${DCU_PRE_SCRIPTS_FOLDER:-"/usr/local/etc/container_update/pre-scripts"}
# post_scripts_folder = ${DCU_POST_SCRIPTS_FOLDER:-"/usr/local/etc/container_update/post-scripts"}

# [paths]
# tput = $(Get-Path tput)
# stty = $(Get-Path stty)
# tee = $(Get-Path tee)
# gawk = $(Get-Path gawk)
# cut = $(Get-Path cut)
# curl = $(Get-Path curl)
# date = $(Get-Path date)
# docker = $(Get-Path docker)
# grep = $(Get-Path grep)
# jq = $(Get-Path jq)
# sed = $(Get-Path sed)
# wget = $(Get-Path wget)
# sort = $(Get-Path sort)
# sendmail = $(Get-Path sendmail)

# [log]
# filePath = ${DCU_LOG_FILEPATH:-"/var/log/container_update.log"}
# level = ${DCU_LOG_LEVEL:-"INFO"}
# retention = ${DCU_LOG_RETENTION:-"7"}

# [mail]
# notifications_enabled = ${DCU_MAIL_NOTIFICATIONS_ENABLED:-"false"}
# mode = ${DCU_MAIL_NOTIFICATION_MODE:-"sendmail"}
# from = ${DCU_MAIL_FROM:-""}
# recipients = ${DCU_MAIL_RECIPIENTS:-""}
# subject = ${DCU_MAIL_SUBJECT:-"Docker Container Update Report from $(hostname)"}

# [telegram]
# notifications_enabled = ${DCU_TELEGRAM_NOTIFICATIONS_ENABLED:-"false"}
# bot_token = ${DCU_TELEGRAM_BOT_TOKEN:-""}
# chat_id = ${DCU_TELEGRAM_CHAT_ID:-""}
# retry_interval = ${DCU_TELEGRAM_RETRY_INTERVAL:-"10"}
# retry_limit = ${DCU_TELEGRAM_RETRY_LIMIT:-"2"}
