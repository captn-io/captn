name: CI

on:
  push:
    branches: [ main, develop, dev-python ]
  pull_request:
    branches: [ main, develop, dev-python ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run flake8
      run: |
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=88

    - name: Run black (check)
      run: |
        black --check app/

    - name: Run isort (check)
      run: |
        isort --check-only app/

    - name: Run mypy
      run: |
        mypy app/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Convert Bandit results to SARIF format
      run: |
        python -c "
        import json
        import sys
        from datetime import datetime

        try:
            with open('bandit-report.json', 'r') as f:
                bandit_data = json.load(f)

            # Convert to SARIF format
            sarif_data = {
                'version': '2.1.0',
                'runs': [{
                    'tool': {
                        'driver': {
                            'name': 'Bandit',
                            'version': '1.7.5',
                            'informationUri': 'https://bandit.readthedocs.io/'
                        }
                    },
                    'results': [],
                    'invocations': [{
                        'executionSuccessful': True,
                        'exitCode': 0
                    }]
                }]
            }

            # Convert bandit results to SARIF results
            for issue in bandit_data.get('results', []):
                sarif_result = {
                    'ruleId': issue.get('issue_text', 'unknown'),
                    'level': 'warning' if issue.get('issue_severity') == 'LOW' else 'error',
                    'message': {
                        'text': issue.get('issue_text', 'Security issue found')
                    },
                    'locations': [{
                        'physicalLocation': {
                            'artifactLocation': {
                                'uri': issue.get('filename', 'unknown')
                            },
                            'region': {
                                'startLine': issue.get('line_number', 1),
                                'startColumn': 1
                            }
                        }
                    }]
                }
                sarif_data['runs'][0]['results'].append(sarif_result)

            with open('bandit-report.sarif', 'w') as f:
                json.dump(sarif_data, f, indent=2)

        except Exception as e:
            print(f'Error converting bandit report: {e}', file=sys.stderr)
            # Create empty SARIF file
            empty_sarif = {
                'version': '2.1.0',
                'runs': [{
                    'tool': {
                        'driver': {
                            'name': 'Bandit',
                            'version': '1.7.5'
                        }
                    },
                    'results': [],
                    'invocations': [{
                        'executionSuccessful': True,
                        'exitCode': 0
                    }]
                }]
            }
            with open('bandit-report.sarif', 'w') as f:
                json.dump(empty_sarif, f, indent=2)
        "

    - name: Upload Bandit results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: bandit-report.sarif

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -f docker/DOCKERFILE -t captn:test .

    - name: Test Docker image
      run: |
        docker run --rm captn:test --version
        docker run --rm captn:test --help

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'pull_request'

    services:
      docker:
        image: docker:dind
        options: >-
          --privileged
          --network=host

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      run: |
        docker build -f docker/DOCKERFILE -t captn:test .

    - name: Run integration tests
      run: |
        # Test basic functionality in dry-run mode
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          captn:test --dry-run --log-level debug

  pre-commit:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run pre-commit
      run: |
        pre-commit run --all-files
